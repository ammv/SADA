<#@ template debug="True" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)SADA\bin\Debug\SADA.exe" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".xaml" #>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    <#
string nspace = "SADA";
            List<Type> types = new List<Type>();

            var q = from t in Assembly.LoadFrom(@"C:\Users\New\Desktop\Курсовая 2\Программа\SADA\SADA\bin\Debug\SADA.exe").GetTypes()
                    where t.IsClass && t.Namespace.StartsWith(nspace) && !t.Name.Contains('<')
                    select t;
            q.ToList().ForEach(t => types.Add(t));

            List<Type> viewTypes = types.Where(t => t.Name.EndsWith("View")).ToList();
            List<Type> viewModelTypes = types.Where(t => t.Name.EndsWith("ViewModel")).ToList();

            Dictionary<string, List<string>> viewFolders = new Dictionary<string, List<string>>();
            Dictionary<string, List<string>> viewModelFolders = new Dictionary<string, List<string>>();

            List<string> viewFolderFull = new List<string>();
            List<string> viewModelFolderFull = new List<string>();

            foreach (var viewType in viewTypes)
            {
                var parts = viewType.FullName.Split('.');

                string folderName = string.Join("", parts.Skip(1).Take(parts.Length - 2));

                if (!viewFolders.ContainsKey(folderName))
                {
                    viewFolders.Add(folderName, new List<string>());
                }

                viewFolders[folderName].Add(viewType.Name);

                viewFolderFull.Add(string.Join(".", parts.Take(parts.Length - 1)));
            }

            foreach (var viewModelType in viewModelTypes)
            {
                var parts = viewModelType.FullName.Split('.');

                string folderName = string.Join("", parts.Skip(1).Take(parts.Length - 2));

                if (!viewModelFolders.ContainsKey(folderName))
                {
                    viewModelFolders.Add(folderName, new List<string>());
                }

                viewModelFolders[folderName].Add(viewModelType.Name);

                viewModelFolderFull.Add(string.Join(".", parts.Take(parts.Length - 1)));
            }

            var viewKeys = viewFolders.Keys.ToList();

            for(int i = 0; i < viewFolders.Count; i++)
            {#>
    xmlns:<#=viewKeys[i]#>="clr-namespace:<#=viewFolderFull[i]#>" 
            <#}

            var viewModelKeys = viewModelFolders.Keys.ToList();

            for(int i = 0; i < viewModelFolders.Count; i++)
            {#>
    xmlns:<#=viewModelKeys[i]#>="clr-namespace:<#=viewModelFolderFull[i]#>" 
            <#}

            #> > <#

            Dictionary<string, string> viewViewModels = new Dictionary<string, string>();

            foreach (var viewFolder in viewFolders)
            {
                var viewModelFolder = $"{viewFolder.Key.Replace("View", "ViewModel")}";
                if (!viewModelFolders.ContainsKey(viewModelFolder))
                {
                    continue;
                }

                var views = viewFolder.Value;


                foreach (var viewModel in viewModelFolders[viewModelFolder])
                {
                    var targetView = views.FirstOrDefault(v => viewModel.StartsWith(v));
                    if (targetView != null)
                    {
                        viewViewModels.Add($"{viewFolder.Key}:{targetView}", $"{viewModelFolder}:{viewModel}");
                    }
                }
            }

            foreach (var vvm in viewViewModels)
            {
                #> 
                <DataTemplate DataType="{x:Type <#=vvm.Value#>}">
                <<#=vvm.Key#> />
                </DataTemplate>
                <#
            }
                    #>
    
</ResourceDictionary>